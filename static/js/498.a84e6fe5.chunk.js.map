{"version":3,"file":"static/js/498.a84e6fe5.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif'\n\nconst ErrorMessage = () => {\n  return (\n    <img src={img} alt='Error img' style={{display: 'block', width: '250px', objectFit: 'contain', margin: '0 auto'}}/>\n  )\n}\n\nexport default ErrorMessage;\n","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner'\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport useMarvelService from '../../services/MarvelService'\n\nimport Mjolnir from '../../resources/img/mjolnir.png';\nimport './randomChar.scss';\n\n\nconst RandomChar = () => {\n\n  const [char, setChar] = useState(null);\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n\n    const timerId = setInterval(updateChar, 60000);\n\n    return () => {\n      clearInterval(timerId)\n    }\n  }, []);\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1009600-1009200) + 1009200);\n    getCharacter(id)\n      .then(onCharLoaded)\n  }\n\n  const errorMessage = error ? <ErrorMessage/> : null;\n  const spinner = loading ? <Spinner/> : null;\n  const content = !(loading || error || !char) ? <View char={char}/> : null;\n  return (\n    <div className=\"randomchar\">\n      {errorMessage}\n      {spinner}\n      {content}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">\n          Or choose another one\n        </p>\n        <button className=\"button button__main\" onClick={() => updateChar()}>\n          <div className=\"inner\" >try it</div>\n        </button>\n        <img src={Mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  )\n}\n\nconst View = ({char}) => {\n  const {name, description, thumbnail, homepage, wiki} = char;\n  const imgStyle = (thumbnail.indexOf('image_not_available') !== -1) ? {objectFit: 'contain'} : null;\n\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default RandomChar\n","import React, { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss'\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setNewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(216);\n  const [charEnded, setCharEnded] = useState(false);\n\n\n  const {loading, error, getAllCharacters} = useMarvelService();\n\n  const onRequest = (offset, initial) => {\n    initial ? setNewItemLoading(false) : setNewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n  }\n\n  useEffect(() => {\n    onRequest(offset, true);\n  }, [])\n\n  const onCharListLoaded = (newCharList) => {\n    let ended = false;\n    if(newCharList.length < 9) {\n      ended = true\n    }\n\n    setCharList(charList => [...charList, ...newCharList])\n    setNewItemLoading(newItemLoading => false);\n    setOffset(offset => offset + 9);\n    setCharEnded(charEnded => ended);\n  }\n\n  const itemRefs = useRef([]);\n\n  const focusItem = (id) => {\n    itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n    itemRefs.current[id].classList.add('char__item_selected');\n    itemRefs.current[id].focus();\n  }\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      const imgStyle = (item.thumbnail.indexOf('image_not_available') !== -1) ? {objectFit: 'unset'} : null;\n      return (\n        <CSSTransition\n              key={item.id}\n              timeout={500}\n              classNames=\"char__item_wrapper\"\n            >\n            <li\n                tabIndex={0}\n                ref={el => itemRefs.current[i] = el}\n                key={item.id}\n                onClick={() => {\n                  props.onCharSelected(item.id);\n                  focusItem(i);\n                }}\n                onKeyPress={(e) => {\n                  if (e.key === ' ' || e.key === \"Enter\") {\n                    props.onCharSelected(item.id);\n                    focusItem(i);\n                  }\n                }}\n                className=\"char__item\">\n                <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n              <div className=\"char__name\">{item.name}</div>\n            </li>\n        </CSSTransition>\n      )\n    });\n    return (\n      <TransitionGroup className='char__grid' >\n        {items}\n      </TransitionGroup>\n    )\n  }\n\n  const items = renderItems(charList);\n\n  const errorMessage = error ? <ErrorMessage/> : null;\n  const spinner = loading && !newItemLoading ? <Spinner/> : null;\n  // const content =  !(loading || error) ? items : null;\n  return (\n    <div className=\"char__list\">\n      {errorMessage}\n      {spinner}\n      {items}\n      {/* {content} */}\n      <button\n        className=\"button button__main button__long\"\n        disabled={newItemLoading}\n        style={{'display': charEnded ? 'none' : 'block'}}\n        onClick={() => onRequest(offset)}>\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  )\n}\n\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss'\n\nconst Skeleton = () => {\n  return (\n    <div className=\"skeleton\">\n      <div className=\"pulse skeleton__header\">\n        <div className=\"pulse skeleton__circle\"></div>\n        <div className=\"pulse skeleton__mini\"></div>\n      </div>\n      <div className=\"pulse skeleton__block\"></div>\n      <div className=\"pulse skeleton__block\"></div>\n      <div className=\"pulse skeleton__block\"></div>\n      <p className=\"char__select\">Please select a character to see information</p>\n    </div>\n  )\n}\nexport default Skeleton\n","import { useState, useEffect } from \"react\";\nimport {Link} from \"react-router-dom\"\nimport PropTypes from 'prop-types';\nimport useMarvelService from \"../../services/MarvelService\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport Skeleton from \"../skeleton/Skeleton\";\n\nconst CharInfo = (props) => {\n\n  const [char, setChar] = useState(null);\n\n  const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n  useEffect(() => {\n    updateChar();\n  }, [props.charId]);\n\n  const updateChar = () => {\n    const {charId} = props;\n    if(!charId) {\n      return;\n    };\n\n    clearError();\n    getCharacter(charId)\n      .then(onCharLoaded)\n  }\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  }\n\n  const skeleton = char || loading || error ? null : <Skeleton/>;\n  const errorMessage = error ? <ErrorMessage/> : null;\n  const spinner = loading ? <Spinner/> : null;\n  const content = !(loading || error || !char) ? <View char={char}/> : null;\n  return (\n    <div className=\"char__info\">\n      {skeleton}\n      {errorMessage}\n      {spinner}\n      {content}\n    </div>\n  )\n}\n\nconst View = ({char}) => {\n  const {name, description, thumbnail, homepage, wiki, comics} = char;\n  if(comics.length > 0 && comics.length>10) {\n    comics.splice(10, comics.length);\n  }\n  const imgStyle = (thumbnail.indexOf('image_not_available') !== -1) ? {objectFit: 'contain'} : null;\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle}/>\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">\n        {description}\n      </div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length === 0 ? 'This character has no comics' : null}\n        {\n          comics.map((item, i) => {\n            return (\n              <li key={i} className=\"char__comics-item\">\n                <Link to={`comics/${(item.resourceURI).replace('http://gateway.marvel.com/v1/public/comics/', '')}`}>\n                  {item.name}\n                </Link>\n              </li>\n            )\n          })\n        }\n      </ul>\n    </>\n  )\n}\n\n\nCharInfo.propTypes = {\n  charId: PropTypes.number\n}\n\nexport default CharInfo;\n","import { Component } from \"react\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\n// предохранители ловят ошибки в методе рендер, методах жизненного цикла и в конструкторах дочерних компонентов\n// не ловят внутри обработчиков событий, асинхронном коде и в самом предохранителе\nclass ErrorBoundary extends Component {\n  state = {\n    error: false\n  }\n  // данный метод только обновляет стейт\n  static getDerivedStateFromError(error) {\n    return {error: true}\n  }\n  componentDidCatch(error, errorInfo) {\n    console.log(error, errorInfo);\n    this.setState({\n      error: true\n    })\n  }\n\n  render() {\n    if(this.state.error) {\n      return <ErrorMessage/>\n    }\n    return this.props.children\n  }\n}\n\nexport default ErrorBoundary;\n","import { useState } from 'react';\nimport { Form, Formik, Field, ErrorMessage as FormikErrorMessage} from 'formik';\nimport * as Yup from \"yup\";\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\nimport { Link } from 'react-router-dom';\n\nimport \"./charSearchForm.scss\"\n\nconst SearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getSearchCharacter, clearError} = useMarvelService();\n\n    const updateChar = (char) => {\n        clearError();\n        getSearchCharacter(char)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char)\n    }\n\n    const errorMessage = error ? <div className=\"char__search-error\" name=\"charName\" component=\"div\">\n        <ErrorMessage/>\n    </div> : null;\n    const results =  !char ? null : char.length > 0 ?\n        <div className=\"char__search-wrapper\">\n            <div className=\"char__search-success\"> There is! Visit {char[0].name} page?</div>\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                <div className=\"inner\">To page</div>\n            </Link>\n        </div> :\n        <div className=\"char__search-error\">\n            The character was not found. Check the name and try again\n        </div>;\n\n    return (\n        <>\n            <Formik\n                initialValues={{\n                    charName: \"\",\n                }}\n                validationSchema= {Yup.object({\n                    charName: Yup.string()\n                        .required('This file is required')\n                })}\n                onSubmit = {({charName}) => updateChar(charName)}\n\n            >\n                <Form className=\"char__search-form\" >\n                    <h3 className=\"char__search-label\">Or find a character by name:</h3>\n                    <div className=\"char__search-wrapper\">\n                        <Field\n                            type=\"text\"\n                            id=\"charName\"\n                            name=\"charName\"\n                            placeholder=\"Enter name\" />\n                        <button\n                            className=\"button button__main\" type='submit'>\n                            <div className=\"inner\">Find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\"/>\n                    {results}\n                    {errorMessage}\n                </Form>\n            </Formik>\n        </>\n    )\n}\n\nexport default SearchForm;\n","import {useState} from 'react'\nimport RandomChar from '../randomChar/RandomChar'\nimport CharList from '../charList/CharList'\nimport CharInfo from '../charInfo/CharInfo'\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary'\nimport CharSearchForm from '../charSearchForm/CharSearchForm'\nimport Vision from '../../resources/img/vision.png'\n\nconst MainPage = () => {\n  const [selectedChar, setCrat] = useState(null)\n\n\n  const onCharSelected = (id) => {\n    setCrat(id);\n  }\n  return (\n    <>\n      <ErrorBoundary>\n        <RandomChar/>\n      </ErrorBoundary>\n      <div className=\"char__content\">\n        <ErrorBoundary>\n          <CharList onCharSelected = {onCharSelected}/>\n        </ErrorBoundary>\n        <div>\n          <ErrorBoundary>\n            <CharInfo charId={selectedChar}/>\n          </ErrorBoundary>\n          <ErrorBoundary>\n            <CharSearchForm/>\n          </ErrorBoundary>\n        </div>\n      </div>\n      <img src={Vision} alt=\"Vision\" className=\"bg-decoration\"/>\n    </>\n  )\n}\n\nexport default MainPage\n","import {useHttp} from '../hooks/http.hook';\n\nconst useMarvelService = () => {\n  const {loading, request, error, clearError} = useHttp();\n  const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; // переменные начинающиеся через нижний лодаш говорят о том что это неизменяемая переменнная (неформальная договоренность между программистами)\n  const _apiKey = 'apikey=d81759a9997ed1ebda79147a02e63a54';\n  const _baseOffset = 210;\n\n  const getAllCharacters = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  }\n\n  const getAllComics = async (offset = _baseOffset) => {\n    const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\n    return res.data.results.map(_transformComics);\n  }\n\n  const getCharacter = async (id) => {\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n    return _transformCharacter(res.data.results[0]);\n  }\n\n  const getSearchCharacter = async (char) => {\n    const res = await request(`${_apiBase}characters?name=${char}&${_apiKey}`);\n    return res.data.results.map(_transformCharacter);\n  }\n\n  const getComic = async (id) => {\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\n    return _transformComics(res.data.results[0]);\n  }\n\n  const _transformCharacter = (char) => {\n    let checkDescription = \"\";\n    if (!char.description) {\n      checkDescription = 'This hero has no description';\n    } else if (char.description.length > 224) {\n      checkDescription = char.description.slice(0, 224) + '...';\n    } else {\n      checkDescription = char.description;\n    };\n    return {\n      id: char.id,\n      name: char.name,\n      description: checkDescription,\n      thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n      homepage: char.urls[0].url,\n      wiki: char.urls[1].url,\n      comics: char.comics.items\n\n    }\n  }\n\n  const _transformComics = (comics) => {\n    let checkDescription = \"\";\n    if (!comics.description) {\n      checkDescription = 'This comic has no description';\n    } else {\n      checkDescription = comics.description;\n    };\n    return {\n      id: comics.id,\n      title: comics.title,\n      description: checkDescription,\n      thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n      homepage: comics.urls[0].url,\n      price: comics.prices[0].price,\n      pageCount: comics.pageCount,\n      language: comics.textObjects.language\n    }\n  }\n\n  return {loading, error, getAllCharacters, getCharacter, getSearchCharacter, getAllComics, getComic, clearError}\n}\n\n\nexport default useMarvelService;\n","import { useState, useCallback } from 'react'\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n    setLoading(true);\n    try {\n      const response = await fetch(url, {method, body, headers});\n\n      if(!response.ok) {\n        throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n      }\n\n      const data = await response.json();\n\n      setLoading(false);\n\n      return data;\n\n    } catch(e) {\n      setLoading(false);\n      setError(e.message);\n      throw e\n    }\n\n  }, []);\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return {loading, request, error, clearError};\n\n}\n"],"names":["src","img","alt","style","display","width","objectFit","margin","View","char","name","description","thumbnail","homepage","wiki","imgStyle","indexOf","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","Mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","renderItems","disabled","comics","splice","to","resourceURI","replace","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getSearchCharacter","component","results","initialValues","charName","validationSchema","Yup","required","onSubmit","type","placeholder","selectedChar","setCrat","CharSearchForm","Vision","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComic","checkDescription","slice","path","extension","urls","title","price","prices","pageCount","language","textObjects"],"sourceRoot":""}